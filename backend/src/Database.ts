//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { usersEntity } from './db/users.entity';
import { transactionsEntity } from './db/transactions.entity';
import { accountsEntity } from './db/accounts.entity';
import { currenciesEntity } from './db/currencies.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      usersEntity,
      transactionsEntity,
      accountsEntity,
      currenciesEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      users: [
        {
          name: 'name 1',
          email: 'email 1',
          password: 'password 1',
          phoneNumber: 'phoneNumber 1',
          id: 7,
        },
        {
          name: 'name 2',
          email: 'email 2',
          password: 'password 2',
          phoneNumber: 'phoneNumber 2',
          id: 100,
        },
        {
          name: 'name 3',
          email: 'email 3',
          password: 'password 3',
          phoneNumber: 'phoneNumber 3',
          id: 25,
        },
        {
          name: 'name 4',
          email: 'email 4',
          password: 'password 4',
          phoneNumber: 'phoneNumber 4',
          id: 10,
        },
        {
          name: 'name 5',
          email: 'email 5',
          password: 'password 5',
          phoneNumber: 'phoneNumber 5',
          id: 96,
        },
      ],
      transactions: [
        {
          amount: 0.18,
          currency: 1,
          senderId: 1,
          receiverId: 1,
          transactionDate: '2024-12-27T18:40:40.094Z',
          id: 3,
        },
        {
          amount: 0.59,
          currency: 2,
          senderId: 2,
          receiverId: 2,
          transactionDate: '2024-12-04T00:18:14.412Z',
          id: 59,
        },
        {
          amount: 0.45,
          currency: 3,
          senderId: 3,
          receiverId: 3,
          transactionDate: '2023-10-07T12:38:23.954Z',
          id: 80,
        },
        {
          amount: 0.36,
          currency: 4,
          senderId: 4,
          receiverId: 4,
          transactionDate: '2024-01-16T09:13:40.472Z',
          id: 18,
        },
        {
          amount: 0.65,
          currency: 5,
          senderId: 5,
          receiverId: 5,
          transactionDate: '2024-08-18T23:39:39.663Z',
          id: 36,
        },
      ],
      accounts: [
        {
          accountNumber: 'accountNumber 1',
          userId: 1,
          balance: 0.31,
          currency: 1,
          id: 30,
        },
        {
          accountNumber: 'accountNumber 2',
          userId: 2,
          balance: 0.7,
          currency: 2,
          id: 53,
        },
        {
          accountNumber: 'accountNumber 3',
          userId: 3,
          balance: 0,
          currency: 3,
          id: 20,
        },
        {
          accountNumber: 'accountNumber 4',
          userId: 4,
          balance: 0.39,
          currency: 4,
          id: 49,
        },
        {
          accountNumber: 'accountNumber 5',
          userId: 5,
          balance: 0.31,
          currency: 5,
          id: 32,
        },
      ],
      currencies: [
        {
          currencyCode: 'currencyCode 1',
          name: 'name 1',
          exchangeRate: 0.76,
          id: 31,
        },
        {
          currencyCode: 'currencyCode 2',
          name: 'name 2',
          exchangeRate: 0.13,
          id: 30,
        },
        {
          currencyCode: 'currencyCode 3',
          name: 'name 3',
          exchangeRate: 0.21,
          id: 62,
        },
        {
          currencyCode: 'currencyCode 4',
          name: 'name 4',
          exchangeRate: 0.12,
          id: 75,
        },
        {
          currencyCode: 'currencyCode 5',
          name: 'name 5',
          exchangeRate: 0.42,
          id: 1,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('usersEntity', data.users);
      await this.SeedResource('transactionsEntity', data.transactions);
      await this.SeedResource('accountsEntity', data.accounts);
      await this.SeedResource('currenciesEntity', data.currencies);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
